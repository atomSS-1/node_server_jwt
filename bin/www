#!/usr/bin/env node

/**
 * Module dependencies.
 */
"use strict";
switch (process.env.NODE_ENV) {
  case "development":
    require("dotenv").config({ path: __dirname + "/../env.development" });
    break;
  case "test":
    require("dotenv").config({ path: __dirname + "/../env.test" });
    break;
  case "production":
    require("dotenv").config({ path: __dirname + "/../env.production" });
    break;
}
var app = require("../app");
var debug = require("debug")("knance:server");
var http = require("http");
const sequelize = require("../models").sequelize;
const Sequelize = require("../models").Sequelize;
const db = require("../models");
const mysql = require("mysql2");
const syncOptions =
  process.env.NODE_ENV === "production" ? null : { alter: true }; //synce 옵션 설정
const jsconfig = require(__dirname + "/../config/config.js");

const configJson = JSON.parse(JSON.stringify(jsconfig));
const env = process.env.NODE_ENV || "development";
const config = configJson[env];
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Synce db models
 * Create HTTP server.
 */

db.sequelize
  .sync(syncOptions)
  .then((res) => {
    const server = http.createServer(app);
    server.listen(port);
    server.on("error", onError);
    server.on("listening", (server) => onListening);
  })
  .catch((err) => {
    console.log(err);
  });

/**
 * Listen on provided port, on all network interfaces.
 */

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
